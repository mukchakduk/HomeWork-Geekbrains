"""
Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

"""

# Создаем список с элементами разных типов данных
my_list = [42, "строка", 3.14, True, [1, 2, 3], {"ключ": "значение"}]

# Проверяем и выводим тип каждого элемента
for element in my_list:
    element_type = type(element)
    print(f"Элемент {element} имеет тип данных: {element_type}")

"""
Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

"""

# Запрос числа элементов в списке
n = int(input("Введите количество элементов в списке: "))

# Инициализируем список пустым значениями
my_list = []

# Заполнение списка с использованием функции input()
for i in range(n):
    value = input(f"Введите элемент списка #{i + 1}: ")
    my_list.append(value)

# Обмен значений соседних элементов
for i in range(0, n - 1, 2):
    my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]

# Вывод результата
print("Результат обмена значений соседних элементов:")
print(my_list)

"""
Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

"""

# Запрос месяца от пользователя
month = int(input("Введите номер месяца (от 1 до 12): "))

# Создаем список с временами года
seasons_list = ["зима", "весна", "лето", "осень"]

# Определяем времена года
if 1 <= month <= 2 or month == 12:
    season = seasons_list[0]  # Зима
elif 3 <= month <= 5:
    season = seasons_list[1]  # Весна
elif 6 <= month <= 8:
    season = seasons_list[2]  # Лето
elif 9 <= month <= 11:
    season = seasons_list[3]  # Осень
else:
    season = "некорректный месяц"

# Выводим результат
if season != "некорректный месяц":
    print(f"Месяц {month} относится к времени года: {season}.")
else:
    print("Вы ввели некорректный месяц.")

"""
Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

"""

# Запрос строки от пользователя
input_string = input("Введите строку из нескольких слов, разделенных пробелами: ")

# Разбиваем строку на слова, используя пробел как разделитель
words = input_string.split()

# Выводим каждое слово с номером строки и обрезаем, если слово слишком длинное
for i, word in enumerate(words, 1):
    truncated_word = word[:10]  # Обрезаем слово до 10 символов
    print(f"{i}: {truncated_word}")

"""
Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.

"""

# Задаем начальный список рейтинга
my_list = [12, 45, 5, 3, 2]

# Запрашиваем новый элемент рейтинга
new_element = int(input("Введите новый элемент рейтинга: "))

# Добавляем новый элемент в рейтинг
my_list.append(new_element)

# Сортируем рейтинг в убывающем порядке
my_list.sort(reverse=True)

# Выводим обновленный рейтинг
print("Результат:", my_list)

"""
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например название, а значение — список значений-характеристик, например список названий товаров.

"""

# Инициализируем список товаров
products = []
product_id = 1

# Ввод информации о товарах
while True:
    name = input("Введите название товара (или 'q' для завершения): ")
    if name == 'q':
        break

    price = float(input("Введите цену товара: "))
    quantity = int(input("Введите количество товара: "))
    unit = input("Введите единицу измерения товара: ")

    product = {
        "название": name,
        "цена": price,
        "количество": quantity,
        "ед": unit
    }

    products.append((product_id, product))
    product_id += 1

# Вывод информации о товарах
for product in products:
    print(product)

# Сбор аналитики о товарах
analytics = {
    "название": [],
    "цена": [],
    "количество": [],
    "ед": []
}

for product in products:
    for key, value in product[1].items():
        if key in analytics:
            if value not in analytics[key]:
                analytics[key].append(value)

print("Аналитика о товарах:")
print(analytics)
