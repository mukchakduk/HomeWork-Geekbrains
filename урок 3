def divide_numbers():
    while True:
        try:
            # Запрос чисел от пользователя
            numerator = float(input("Введите числитель: "))
            denominator = float(input("Введите знаменатель: "))

            # Проверка деления на ноль
            if denominator == 0:
                raise ZeroDivisionError("Деление на ноль невозможно.")

            # Выполнение деления
            result = numerator / denominator

            # Вывод результата
            print(f"Результат деления: {result}")
            break  # Выход из цикла при успешном выполнении
        except ValueError:
            print("Ошибка: Введите корректное числовое значение.")
        except ZeroDivisionError as e:
            print(f"Ошибка: {e}")


# Вызов функции
divide_numbers()

***
Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

***

def print_user_info(**kwargs):
    # Извлекаем данные о пользователе из аргументов
    name = kwargs.get('name', 'Не указано')
    surname = kwargs.get('surname', 'Не указана')
    birth_year = kwargs.get('birth_year', 'Не указан')
    city = kwargs.get('city', 'Не указан')
    email = kwargs.get('email', 'Не указан')
    phone = kwargs.get('phone', 'Не указан')

    # Выводим данные о пользователе одной строкой
    print(f"Имя: {name}, Фамилия: {surname}, Год рождения: {birth_year}, "
          f"Город проживания: {city}, Email: {email}, Телефон: {phone}")

# Вызываем функцию с именованными аргументами
rint_user_info(name='John', surname='Doe', birth_year='1998', city='Cityville',)

***
Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.

***

def my_func(a, b, c):
    # Находим наименьший из трех аргументов
    min_arg = min(a, b, c)

    # Возвращаем сумму наибольших двух аргументов
    return a + b + c - min_arg

# Пример использования функции
arg1 = float(input("Введите первый аргумент: "))
arg2 = float(input("Введите второй аргумент: "))
arg3 = float(input("Введите третий аргумент: "))

result = my_func(arg1, arg2, arg3)
print(f"Сумма наибольших двух аргументов: {result}")

***
Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

***

# Способ 1: оператор **
def my_func_method1(x, y):
    result = x ** y
    return result

# Способ 2: цикл
def my_func_method2(x, y):
    result = 1
    for _ in range(abs(y)):
        result *= x
    if y < 0:
        result = 1 / result
    return result

# Ввод числа и степени от пользователя
x = float(input("Введите действительное положительное число x: "))
y = int(input("Введите целое отрицательное число y: "))

# Проверка ввода
if x <= 0 or y >= 0:
    print("Некорректный ввод. x должно быть действительным положительным числом, а y - целым отрицательным числом.")
else:
    # Вызов функций и вывод результатов
    result_method1 = my_func_method1(x, y)
    result_method2 = my_func_method2(x, y)

    print(f"Способ 1 (оператор **): {result_method1}")
    print(f"Способ 2 (цикл): {result_method2}")

***
Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

***

def calculate_sum(input_string):
    numbers = input_string.split()
    try:
        return sum(map(float, numbers))
    except ValueError:
        return None


total_sum = 0

while True:
    user_input = input("Введите числа, разделенные пробелом (или 'q' для завершения): ")

    if user_input.lower() == 'q':
        break

    current_sum = calculate_sum(user_input)

    if current_sum is not None:
        total_sum += current_sum
        print(f"Текущая сумма: {total_sum}")
    else:
        print("Ошибка ввода. Пожалуйста, введите числа или 'q' для завершения.")

print(f"Итоговая сумма: {total_sum}")


***
Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

***

def int_func(word):
    return word.capitalize()

def process_string(input_string):
    words = input_string.split()
    capitalized_words = [int_func(word) for word in words]
    result_string = ' '.join(capitalized_words)
    return result_string

# Пример использования функции
input_string = input("Введите строку из слов, разделенных пробелом: ")
result = process_string(input_string)
print("Результат:", result)
